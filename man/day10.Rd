% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day10.R
\name{day10}
\alias{day10}
\alias{f10a_score_syntax_errors}
\alias{f10b_score_incomplete_lines}
\alias{example_data_10}
\title{Day 10: Syntax Scoring}
\usage{
f10a_score_syntax_errors(x)

f10b_score_incomplete_lines(x)

example_data_10(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
For Part One, \code{f10a_score_syntax_errors(x)} returns the solution. For
Part Two, \code{f10b_score_incomplete_lines(x)} returns returns the solution.
}
\description{
\href{https://adventofcode.com/2021/day/10}{Syntax Scoring}
}
\details{
\strong{Part One}

You ask the submarine to determine the best route out of the deep-sea
cave, but it only replies:\preformatted{Syntax error in navigation subsystem on line: all of them
}

\emph{All of them?!} The damage is worse than you thought. You bring up a
copy of the navigation subsystem (your puzzle input).

The navigation subsystem syntax is made of several lines containing
\emph{chunks}. There are one or more chunks on each line, and chunks contain
zero or more other chunks. Adjacent chunks are not separated by any
delimiter; if one chunk stops, the next chunk (if any) can immediately
start. Every chunk must \emph{open} and \emph{close} with one of four legal pairs
of matching characters:
\itemize{
\item If a chunk opens with \code{(}, it must close with \verb{)}.
\item If a chunk opens with \code{[}, it must close with \verb{]}.
\item If a chunk opens with \verb{\{}, it must close with \verb{\}}.
\item If a chunk opens with \code{<}, it must close with \code{>}.
}

So, \verb{()} is a legal chunk that contains no other chunks, as is \verb{[]}.
More complex but valid chunks include \verb{([])}, \verb{\{()()()\}}, \verb{<([\{\}])>},
\verb{[<>(\{\})\{\}[([])<>]]}, and even \verb{(((((((((())))))))))}.

Some lines are \emph{incomplete}, but others are \emph{corrupted}. Find and
discard the corrupted lines first.

A corrupted line is one where a chunk \emph{closes with the wrong character}
\itemize{
\item that is, where the characters it opens and closes with do not form one
of the four legal pairs listed above.
}

Examples of corrupted chunks include \verb{(]}, \verb{\{()()()>}, \verb{(((()))\}}, and
\verb{<([])\{()\}[\{\}])}. Such a chunk can appear anywhere within a line, and
its presence causes the whole line to be considered corrupted.

For example, consider the following navigation subsystem:\preformatted{[(\{(<(())[]>[[\{[]\{<()<>>
[(()[<>])](\{[<\{<<[]>>(
\{([(<\{\}[<>[]\}>\{[]\{[(<()>
((((\{<>\}<\{<\{<>\}\{[]\{[]\{\}
[[<[([]))<([[\{\}[[()]]]
[\{[\{(\{\}]\{\}\}([\{[\{\{\{\}\}([]
\{<[[]]>\}<\{[\{[\{[]\{()[[[]
[<(<(<(<\{\}))><([]([]()
<\{([([[(<>())\{\}]>(<<\{\{
<\{([\{\{\}\}[<[[[<>\{\}]]]>[]]
}

Some of the lines aren\'t corrupted, just incomplete; you can ignore
these lines for now. The remaining five lines are corrupted:
\itemize{
\item \verb{\{([(<\{\}[<>[]\}>\{[]\{[(<()>} - Expected \verb{]}, but found \verb{\}} instead.
\item \verb{[[<[([]))<([[\{\}[[()]]]} - Expected \verb{]}, but found \verb{)} instead.
\item \verb{[\{[\{(\{\}]\{\}\}([\{[\{\{\{\}\}([]} - Expected \verb{)}, but found \verb{]} instead.
\item \verb{[<(<(<(<\{\}))><([]([]()} - Expected \code{>}, but found \verb{)} instead.
\item \verb{<\{([([[(<>())\{\}]>(<<\{\{} - Expected \verb{]}, but found \code{>} instead.
}

Stop at the first incorrect closing character on each corrupted line.

Did you know that syntax checkers actually have contests to see who can
get the high score for syntax errors in a file? It\'s true! To calculate
the syntax error score for a line, take the \emph{first illegal character} on
the line and look it up in the following table:
\itemize{
\item \verb{)}: \code{3} points.
\item \verb{]}: \code{57} points.
\item \verb{\}}: \code{1197} points.
\item \code{>}: \code{25137} points.
}

In the above example, an illegal \verb{)} was found twice (\code{2*3 = 6} points),
an illegal \verb{]} was found once (\code{57} points), an illegal \verb{\}} was found
once (\code{1197} points), and an illegal \code{>} was found once (\code{25137}
points). So, the total syntax error score for this file is
\code{6+57+1197+25137 = 26397} points!

Find the first illegal character in each corrupted line of the
navigation subsystem. \emph{What is the total syntax error score for those
errors?}

\strong{Part Two}

Now, discard the corrupted lines. The remaining lines are \emph{incomplete}.

Incomplete lines don\'t have any incorrect characters - instead,
they\'re missing some closing characters at the end of the line. To
repair the navigation subsystem, you just need to figure out \emph{the
sequence of closing characters} that complete all open chunks in the
line.

You can only use closing characters (\verb{)}, \verb{]}, \verb{\}}, or \code{>}), and you
must add them in the correct order so that only legal pairs are formed
and all chunks end up closed.

In the example above, there are five incomplete lines:
\itemize{
\item \verb{[(\{(<(())[]>[[\{[]\{<()<>>} - Complete by adding \verb{\}\}]])\})]}.
\item \verb{[(()[<>])](\{[<\{<<[]>>(} - Complete by adding \verb{)\}>]\})}.
\item \verb{((((\{<>\}<\{<\{<>\}\{[]\{[]\{\}} - Complete by adding \verb{\}\}>\}>))))}.
\item \verb{\{<[[]]>\}<\{[\{[\{[]\{()[[[]} - Complete by adding \verb{]]\}\}]\}]\}>}.
\item \verb{<\{([\{\{\}\}[<[[[<>\{\}]]]>[]]} - Complete by adding \verb{])\}>}.
}

Did you know that autocomplete tools \emph{also} have contests? It\'s true!
The score is determined by considering the completion string
character-by-character. Start with a total score of \code{0}. Then, for each
character, multiply the total score by 5 and then increase the total
score by the point value given for the character in the following table:
\itemize{
\item \verb{)}: \code{1} point.
\item \verb{]}: \code{2} points.
\item \verb{\}}: \code{3} points.
\item \code{>}: \code{4} points.
}

So, the last completion string above - \verb{])\}>} - would be scored as
follows:
\itemize{
\item Start with a total score of \code{0}.
\item Multiply the total score by 5 to get \code{0}, then add the value of
\verb{]} (2) to get a new total score of \code{2}.
\item Multiply the total score by 5 to get \code{10}, then add the value of
\verb{)} (1) to get a new total score of \code{11}.
\item Multiply the total score by 5 to get \code{55}, then add the value of
\verb{\}} (3) to get a new total score of \code{58}.
\item Multiply the total score by 5 to get \code{290}, then add the value of
\code{>} (4) to get a new total score of \code{294}.
}

The five lines\' completion strings have total scores as follows:
\itemize{
\item \verb{\}\}]])\})]} - \code{288957} total points.
\item \verb{)\}>]\})} - \code{5566} total points.
\item \verb{\}\}>\}>))))} - \code{1480781} total points.
\item \verb{]]\}\}]\}]\}>} - \code{995444} total points.
\item \verb{])\}>} - \code{294} total points.
}

Autocomplete tools are an odd bunch: the winner is found by \emph{sorting}
all of the scores and then taking the \emph{middle} score. (There will always
be an odd number of scores to consider.) In this example, the middle
score is \code{288957} because there are the same number of scores smaller
and larger than it.

Find the completion string for each incomplete line, score the
completion strings, and sort the scores. \emph{What is the middle score?}
}
\examples{
f10a_score_syntax_errors(example_data_10())
f10b_score_incomplete_lines(example_data_10())
}
